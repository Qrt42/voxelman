import os

Import('env')

module_env = env.Clone()

if os.path.isdir('../mesh_data_resource'):
    module_env.Append(CPPDEFINES=['MESH_DATA_RESOURCE_PRESENT'])

sources = [

    "register_types.cpp",

    "library/voxelman_library.cpp",
    "library/voxelman_library_simple.cpp",
    "library/voxelman_library_merger.cpp",

    "library/voxel_surface.cpp",
    "library/voxel_surface_simple.cpp",
    "library/voxel_surface_merger.cpp",

    "data/voxel_light.cpp",

    "meshers/voxel_mesher.cpp",
    
    "meshers/transvoxel_uv_mesher/transvoxel_cell_data.cpp",
    "meshers/transvoxel_uv_mesher/voxel_mesher_uv_transvoxel.cpp",
    "meshers/transvoxel_uv_mesher/transvoxel_tables.cpp",

    "meshers/blocky/voxel_mesher_blocky.cpp",
    "meshers/default/voxel_mesher_default.cpp",

    "world/voxel_world.cpp",
    "world/voxel_chunk.cpp",
    "world/voxel_structure.cpp",
    "world/block_voxel_structure.cpp",
    "world/environment_data.cpp",
    "world/voxel_chunk_prop_data.cpp",

    "world/blocky/voxel_chunk_blocky.cpp",
    "world/blocky/voxel_world_blocky.cpp",

    "world/default/voxel_world_default.cpp",
    "world/default/voxel_chunk_default.cpp",

    "meshers/cubic_mesher/voxel_mesher_cubic.cpp",
    "meshers/cubic_mesher/voxel_cube_points.cpp",


    "level_generator/voxelman_level_generator.cpp",

    "areas/world_area.cpp",

    "world/voxel_world_editor.cpp",
    
    "thirdparty/lz4/lz4.c"
]

if ARGUMENTS.get('custom_modules_shared', 'no') == 'yes':
    # Shared lib compilation
    module_env.Append(CCFLAGS=['-fPIC'])
    module_env['LIBS'] = []
    shared_lib = module_env.SharedLibrary(target='#bin/voxelman', source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=['#bin'])
else:
    # Static compilation
    module_env.add_source_files(env.modules_sources, sources)

